#!/sbin/openrc-run
# Copyright (c) 2007-2015 The OpenRC Authors.
# See the Authors file at the top-level directory of this distribution and
# https://github.com/OpenRC/openrc/blob/master/AUTHORS
#
# This file is part of OpenRC. It is subject to the license terms in
# the LICENSE file found in the top-level directory of this
# distribution and at https://github.com/OpenRC/openrc/blob/master/LICENSE
# This file may not be copied, modified, propagated, or distributed
# except according to the terms contained in the LICENSE file.

command=%%PREFIX%%/sbin/dhcpcd
command_args="-q"

dhcpcd=${RC_SVCNAME##*.}
if [ -n "$dhcpcd" -a "$dhcpcd" != "dhcpcd" ]; then
        dhcpcd_device="$dhcpcd"
fi
name="DHCP Client Daemon"
[ -n "$dhcpcd_device" ] && name="$name ($dhcpcd_device)"


depend()
{
	provide dhcp
	need localmount
	after bootmisc modules devd network
	keyword -stop
}

uniqify()
{
	local result= i=
	for i; do
		case " $result " in
		*" $i "*);;
		*) result="$result $i";;
		esac
	done
	echo "${result# *}"
}

reverse()
{
	local result= i=
	for i; do
		result="$i $result"
	done
	echo "${result# *}"
}

sys_interfaces()
{
	ifconfig -l$1
}

auto_interfaces()
{
	local ifs= c= f=

	for f in /etc/ifconfig.*; do
		[ -f "$f" ] && printf "%s" "${f##*.} "
	done
	for f in /etc/ip.*; do
		[ -f "$f" ] && printf "%s" "${f##*.} "
	done
	echo
}

interfaces()
{
	uniqify $(sys_interfaces "$@") $interfaces $(auto_interfaces)
}

stop_pre()
{
	# When shutting down, kill dhcpcd but preserve network
	# We do this as /var/run/dhcpcd could be cleaned out when we
	# return to multiuser.
	if yesno $RC_GOINGDOWN; then
		: ${stopsig:=SIGKILL}
	fi
}

check_dhcpcd()
{
	# Get our ifconfig settings
	have_ipv4="false"
	have_ipv6="false"

        int="$1"
	intv=$(shell_var "$int")
	eval upcmd=\$ifup_$intv
	for func in ip ifconfig; do
		eval cmd=\$${func}_$intv
		if [ -n "$cmd" -o -f /etc/"$func.$int" ]; then
			cf=/etc/"$func.$int"
			break
		fi
	done

	echo $cmd | grep -q "DHCP"
	if [ $? -eq 0 ] ; then have_ipv4="true"; fi

	echo $cmd | grep -q "IPV6"
	if [ $? -eq 0 ] ; then have_ipv6="true"; fi

name="dhcpcd"
ifn="$2"
command="%%PREFIX%%/sbin/dhcpcd"
command_args="$ifn"
if [ -n "$ifn" ]; then
	specific="$(get_if_var $ifn dhcpcd_flags_IF)"
	if [ -z "$flags" -a -n "$specific" ]; then
		rc_flags="$specific"
	fi
	pidfile="/var/run/dhcpcd-$ifn.pid"
else
	pidfile="$($command -P $rc_flags)"
fi
start_precmd="dhcpcd_precmd"


	# This is a v4 only request?
	if [ "$have_ipv6" = "false" ] ; then
		command_args="${command_args} -4"
	fi

	# This is a v6 only request?
	if [ "$have_ipv4" = "false" ] ; then
		command_args="${command_args} -6"
	fi

	# Is this device eben enabled for DHCP?
	if [ "$have_ipv4" != "true" -a "$have_ipv6" != "true" ] ; then
		return 1
	fi

        command_args="${command_args} $int"
	export command_args

	# Determine the pidfile
 	export pidfile=$(${command} -P $command_args)

	return 0

}

start()
{
	# dhcpcd may need local binaries
	export PATH=${PATH}:/usr/local/sbin
}


if [ -n "$ifn" ]; then
	if ! dhcpif $ifn; then
		err 1 "$ifn is not enabled for DHCP"
	fi
fi

		# We have a device that needs dhcpcd
		ln -fs /usr/local/etc/init.d/dhcpcd /usr/local/etc/init.d/dhcpcd.${int}
		/sbin/service dhcpcd.${int} stop
	done
	return 0
}
